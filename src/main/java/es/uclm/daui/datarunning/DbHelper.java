
 
/********************************************************/
/*  Class: DbHelpder.java                               */
/*  Generated by UML2Android                            */
/*  Author: Francisco Martinez Esteso                   */
/********************************************************/

package es.uclm.daui.datarunning;
 

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import android.content.Context;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager.NameNotFoundException;
import android.database.Cursor;
import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteException;
import android.database.sqlite.SQLiteOpenHelper;

public class DbHelper extends SQLiteOpenHelper {
    // If you change the database schema, you must increment the database version.
    public static final int DATABASE_VERSION = 1;
    
    // Name of the file where the database will be stored.
    public static final String DATABASE_NAME = "database.db";
    
    // Table names
 
    	private static final String TABLE_USER = "User";
 
    	private static final String TABLE_CLASSIFICATION = "Classification";
 
    	private static final String TABLE_RACE = "Race";
 
    	private static final String TABLE_SURVEY = "Survey";
 
    	private static final String TABLE_CLUB = "Club";
 
    	private static final String TABLE_CATEGORY = "Category";
 
    	private static final String TABLE_POSITION = "Position";







    
    // Column names
    private static final String KEY_ID = "_id";
    
    	// User table - Column names
    	   
  


 
 
		private static final String KEY_USER_NAME = "name";	
		private static final String KEY_USER_AGE = "age";	
 
 
    	// Classification table - Column names
    	   
  


 
 
		private static final String KEY_CLASSIFICATION_TIME = "time";	
		private static final String KEY_CLASSIFICATION_YEAR = "year";	
 
 
    	// Race table - Column names
    	   
  


 
 
		private static final String KEY_RACE_NAME = "name";	
		private static final String KEY_RACE_LOCALITY = "locality";	
		private static final String KEY_RACE_DISTANCE = "distance";	
 
 
    	// Survey table - Column names
    	   
  


 
 
		private static final String KEY_SURVEY_RATING = "rating";	
		private static final String KEY_SURVEY_ORGANISATION_RATING = "organisation rating";
		private static final String KEY_SURVEY_ROUTE_RATING = "route rating";
		private static final String KEY_SURVEY_GENERAL_RATING = "general rating";
 
 
    	// Club table - Column names
    	   
  


 
 
		private static final String KEY_CLUB_NAME = "name";	
		private static final String KEY_CLUB_LOCALITY = "locality";	
 
 
    	// Category table - Column names
    	   
  


 
 
		private static final String KEY_CATEGORY_NAME = "name";	
 
 
    	// Position table - Column names
    	   
  


 
 
		private static final String KEY_POSITION_CATEGORY_POSITION = "category position";
		private static final String KEY_POSITION_GENERAL_POSITION = "general position";
 
 







    
    // SQL sentences to create the tables of the database.
    	   
  


private static final String CREATE_TABLE_USER = "CREATE TABLE User(_id INTEGER PRIMARY KEY, name TEXT, age INTEGER)"; 
    	   
  


private static final String CREATE_TABLE_CLASSIFICATION = "CREATE TABLE Classification(_id INTEGER PRIMARY KEY, time TEXT, year INTEGER)"; 
    	   
  


private static final String CREATE_TABLE_RACE = "CREATE TABLE Race(_id INTEGER PRIMARY KEY, name TEXT, locality TEXT, distance INTEGER)"; 
    	   
  


private static final String CREATE_TABLE_SURVEY = "CREATE TABLE Survey(_id INTEGER PRIMARY KEY, rating INTEGER, organisation rating INTEGER, route rating INTEGER, generaral rating INTEGER)"; 
    	   
  


private static final String CREATE_TABLE_CLUB = "CREATE TABLE Club(_id INTEGER PRIMARY KEY, name TEXT, locality TEXT)"; 
    	   
  


private static final String CREATE_TABLE_CATEGORY = "CREATE TABLE Category(_id INTEGER PRIMARY KEY, name TEXT)"; 
    	   
  


private static final String CREATE_TABLE_POSITION = "CREATE TABLE Position(_id INTEGER PRIMARY KEY, category position INTEGER, general position INTEGER)"; 








    public DbHelper(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
    public void onCreate(SQLiteDatabase db) {
    	db.execSQL(CREATE_TABLE_USER);
    	db.execSQL(CREATE_TABLE_CLASSIFICATION);
    	db.execSQL(CREATE_TABLE_RACE);
    	db.execSQL(CREATE_TABLE_SURVEY);
    	db.execSQL(CREATE_TABLE_CLUB);
    	db.execSQL(CREATE_TABLE_CATEGORY);
    	db.execSQL(CREATE_TABLE_POSITION);







    }
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // @todo What's your upgrade policy? Delete your old data or move it to the new database?
        // db.execSQL(SQL_DELETE_ENTRIES);
        onCreate(db);
    }
    public void onDowngrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        onUpgrade(db, oldVersion, newVersion);
    }
    public void emptyDatabase() {
    	SQLiteDatabase db = this.getWritableDatabase();
    	
 
    	db.execSQL("DROP TABLE "+TABLE_USER);
 
    	db.execSQL("DROP TABLE "+TABLE_CLASSIFICATION);
 
    	db.execSQL("DROP TABLE "+TABLE_RACE);
 
    	db.execSQL("DROP TABLE "+TABLE_SURVEY);
 
    	db.execSQL("DROP TABLE "+TABLE_CLUB);
 
    	db.execSQL("DROP TABLE "+TABLE_CATEGORY);
 
    	db.execSQL("DROP TABLE "+TABLE_POSITION);







    	
    	onCreate(db);
    }
    
    	    



    

 


   
  


 


   
  


 


    




     /*
       * Inserts a user into the database.
       * @param user Object with all the values of the object to be inserted in the database.
       * @returns The rowid of the row created, or -1 if there was an error.
       */
      public long createUser(User user) {
   	  
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   	    if (user.getId()!=-1) values.put(KEY_ID, user.getId());
   			values.put(KEY_USER_NAME, user.getName());	
   			values.put(KEY_USER_AGE, user.getAge());	
   		
       	// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   		
   		// insert row
   		long result = db.insert(TABLE_USER, null, values);
   		if (result==-1) {
   			if (updateUser(user)>0) result = user.getId(); // Update the row if it already exists.
   		} else user.setId(result); // Assign the id.
   		
   		
   		
   		
              	
   		// close the database
   		db.close();
   		
   		return result;
      }
      /*
       * Returns the user whose id is '_id' or null if it doesn't exist in the database.
       * @return id of the user in the database to be returned.
       */
      public User readUser(long _id) {
      		// get reference of the database
   	    SQLiteDatabase db = this.getReadableDatabase();
   	    
   	    // get the result of the query in a cursor
   	    Cursor cursor = db.rawQuery("SELECT * from "+TABLE_USER+" WHERE _id="+_id, null);
   	    
   	    if (cursor != null) cursor.moveToFirst();
   	    else return null; 
   	    
   	    // If the cursor returned no rows then return null. 
   	    if (cursor.getCount()==0) return null;
   	    
   	    User user = new User();
   	    
   	    user.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
      		
   			 user.setName(cursor.getString(cursor.getColumnIndex(KEY_USER_NAME)));	
   			 user.setAge(cursor.getInt(cursor.getColumnIndex(KEY_USER_AGE)));	
   		
   		
   		 
   		 
   		 
   		
   	    return user;
      } 
     /*
       * Returns the list of users in the database.
       * @return ArrayList with all the users in the database.
       */
      public ArrayList<User> getAllUsers() {
      		ArrayList<User> users = new ArrayList<User>();
      		
      		// The SQL query
      		String query = "SELECT * FROM " + TABLE_USER;
      		
      		// get reference of the database
      		SQLiteDatabase db = this.getWritableDatabase();
   	    Cursor cursor = db.rawQuery(query, null);
   	 
   	 	// Build the array with the results in the cursor
   	 	User user = null;
   	 	if (cursor.moveToFirst()) {
   	 		do {
   	 			user = new User();
   	 			user.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
   			 		user.setName(cursor.getString(cursor.getColumnIndex(KEY_USER_NAME)));	
   			 		user.setAge(cursor.getInt(cursor.getColumnIndex(KEY_USER_AGE)));	
   				
   				 
   				 
   				 
   	 			users.add(user);
   	 		} while (cursor.moveToNext());
   	 	}
   	 	
   	 	return users;
      } 
     /*
       * Updates the values of a user in the database according to its 'id'.
       * @param The updated information of the user.
       * @return The number of users updated in the database (-1 if update failed).
       */
      public int updateUser(User user) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (user.getId()==-1) return -1;
      		
      		// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	        
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   			values.put(KEY_USER_NAME, user.getName());	
   			values.put(KEY_USER_AGE, user.getAge());	
   		
       	
   		
   		// update the database object.
   		int i = db.update(TABLE_USER, values, KEY_ID + " = ?", new String[] { String.valueOf(user.getId()) });
           
           db.close();
   
           return i;
      }
     
      /*
       * Deletes the users in the database whose 'id' is the one specified in the parameter.
       * @param user including the 'id' of the rows to be deleted in the database.
       */
      public void deleteUser(User user) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (user.getId()==-1) return;
      		
     		 // get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	     
   	     // delete the object from the database
   	     db.delete(TABLE_USER, KEY_ID + " = ?", new String[] { String.valueOf(user.getId()) });
            db.close();
      }
    
    	    



    

 


   
  


 


   
  


 


    




     /*
       * Inserts a classification into the database.
       * @param classification Object with all the values of the object to be inserted in the database.
       * @returns The rowid of the row created, or -1 if there was an error.
       */
      public long createClassification(Classification classification) {
   	  
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   	    if (classification.getId()!=-1) values.put(KEY_ID, classification.getId());
   			values.put(KEY_CLASSIFICATION_TIME, classification.getTime());	
   			values.put(KEY_CLASSIFICATION_YEAR, classification.getYear());	
   		
       	// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   		
   		// insert row
   		long result = db.insert(TABLE_CLASSIFICATION, null, values);
   		if (result==-1) {
   			if (updateClassification(classification)>0) result = classification.getId(); // Update the row if it already exists.
   		} else classification.setId(result); // Assign the id.
   		
   		
   		
   		
              	
   		// close the database
   		db.close();
   		
   		return result;
      }
      /*
       * Returns the classification whose id is '_id' or null if it doesn't exist in the database.
       * @return id of the classification in the database to be returned.
       */
      public Classification readClassification(long _id) {
      		// get reference of the database
   	    SQLiteDatabase db = this.getReadableDatabase();
   	    
   	    // get the result of the query in a cursor
   	    Cursor cursor = db.rawQuery("SELECT * from "+TABLE_CLASSIFICATION+" WHERE _id="+_id, null);
   	    
   	    if (cursor != null) cursor.moveToFirst();
   	    else return null; 
   	    
   	    // If the cursor returned no rows then return null. 
   	    if (cursor.getCount()==0) return null;
   	    
   	    Classification classification = new Classification();
   	    
   	    classification.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
      		
   			 classification.setTime(cursor.getString(cursor.getColumnIndex(KEY_CLASSIFICATION_TIME)));	
   			 classification.setYear(cursor.getInt(cursor.getColumnIndex(KEY_CLASSIFICATION_YEAR)));	
   		
   		
   		 
   		 
   		 
   		
   	    return classification;
      } 
     /*
       * Returns the list of classifications in the database.
       * @return ArrayList with all the classifications in the database.
       */
      public ArrayList<Classification> getAllClassifications() {
      		ArrayList<Classification> classifications = new ArrayList<Classification>();
      		
      		// The SQL query
      		String query = "SELECT * FROM " + TABLE_CLASSIFICATION;
      		
      		// get reference of the database
      		SQLiteDatabase db = this.getWritableDatabase();
   	    Cursor cursor = db.rawQuery(query, null);
   	 
   	 	// Build the array with the results in the cursor
   	 	Classification classification = null;
   	 	if (cursor.moveToFirst()) {
   	 		do {
   	 			classification = new Classification();
   	 			classification.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
   			 		classification.setTime(cursor.getString(cursor.getColumnIndex(KEY_CLASSIFICATION_TIME)));	
   			 		classification.setYear(cursor.getInt(cursor.getColumnIndex(KEY_CLASSIFICATION_YEAR)));	
   				
   				 
   				 
   				 
   	 			classifications.add(classification);
   	 		} while (cursor.moveToNext());
   	 	}
   	 	
   	 	return classifications;
      } 
     /*
       * Updates the values of a classification in the database according to its 'id'.
       * @param The updated information of the classification.
       * @return The number of classifications updated in the database (-1 if update failed).
       */
      public int updateClassification(Classification classification) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (classification.getId()==-1) return -1;
      		
      		// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	        
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   			values.put(KEY_CLASSIFICATION_TIME, classification.getTime());	
   			values.put(KEY_CLASSIFICATION_YEAR, classification.getYear());	
   		
       	
   		
   		// update the database object.
   		int i = db.update(TABLE_CLASSIFICATION, values, KEY_ID + " = ?", new String[] { String.valueOf(classification.getId()) });
           
           db.close();
   
           return i;
      }
     
      /*
       * Deletes the classifications in the database whose 'id' is the one specified in the parameter.
       * @param classification including the 'id' of the rows to be deleted in the database.
       */
      public void deleteClassification(Classification classification) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (classification.getId()==-1) return;
      		
     		 // get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	     
   	     // delete the object from the database
   	     db.delete(TABLE_CLASSIFICATION, KEY_ID + " = ?", new String[] { String.valueOf(classification.getId()) });
            db.close();
      }
    
    	    



    

 


   
  


 


   
  


 


    




     /*
       * Inserts a race into the database.
       * @param race Object with all the values of the object to be inserted in the database.
       * @returns The rowid of the row created, or -1 if there was an error.
       */
      public long createRace(Race race) {
   	  
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   	    if (race.getId()!=-1) values.put(KEY_ID, race.getId());
   			values.put(KEY_RACE_NAME, race.getName());	
   			values.put(KEY_RACE_LOCALITY, race.getLocality());	
   			values.put(KEY_RACE_DISTANCE, race.getDistance());	
   		
       	// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   		
   		// insert row
   		long result = db.insert(TABLE_RACE, null, values);
   		if (result==-1) {
   			if (updateRace(race)>0) result = race.getId(); // Update the row if it already exists.
   		} else race.setId(result); // Assign the id.
   		
   		
   		
   		
              	
   		// close the database
   		db.close();
   		
   		return result;
      }
      /*
       * Returns the race whose id is '_id' or null if it doesn't exist in the database.
       * @return id of the race in the database to be returned.
       */
      public Race readRace(long _id) {
      		// get reference of the database
   	    SQLiteDatabase db = this.getReadableDatabase();
   	    
   	    // get the result of the query in a cursor
   	    Cursor cursor = db.rawQuery("SELECT * from "+TABLE_RACE+" WHERE _id="+_id, null);
   	    
   	    if (cursor != null) cursor.moveToFirst();
   	    else return null; 
   	    
   	    // If the cursor returned no rows then return null. 
   	    if (cursor.getCount()==0) return null;
   	    
   	    Race race = new Race();
   	    
   	    race.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
      		
   			 race.setName(cursor.getString(cursor.getColumnIndex(KEY_RACE_NAME)));	
   			 race.setLocality(cursor.getString(cursor.getColumnIndex(KEY_RACE_LOCALITY)));	
   			 race.setDistance(cursor.getInt(cursor.getColumnIndex(KEY_RACE_DISTANCE)));	
   		
   		
   		 
   		 
   		 
   		
   	    return race;
      } 
     /*
       * Returns the list of races in the database.
       * @return ArrayList with all the races in the database.
       */
      public ArrayList<Race> getAllRaces() {
      		ArrayList<Race> races = new ArrayList<Race>();
      		
      		// The SQL query
      		String query = "SELECT * FROM " + TABLE_RACE;
      		
      		// get reference of the database
      		SQLiteDatabase db = this.getWritableDatabase();
   	    Cursor cursor = db.rawQuery(query, null);
   	 
   	 	// Build the array with the results in the cursor
   	 	Race race = null;
   	 	if (cursor.moveToFirst()) {
   	 		do {
   	 			race = new Race();
   	 			race.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
   			 		race.setName(cursor.getString(cursor.getColumnIndex(KEY_RACE_NAME)));	
   			 		race.setLocality(cursor.getString(cursor.getColumnIndex(KEY_RACE_LOCALITY)));	
   			 		race.setDistance(cursor.getInt(cursor.getColumnIndex(KEY_RACE_DISTANCE)));	
   				
   				 
   				 
   				 
   	 			races.add(race);
   	 		} while (cursor.moveToNext());
   	 	}
   	 	
   	 	return races;
      } 
     /*
       * Updates the values of a race in the database according to its 'id'.
       * @param The updated information of the race.
       * @return The number of races updated in the database (-1 if update failed).
       */
      public int updateRace(Race race) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (race.getId()==-1) return -1;
      		
      		// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	        
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   			values.put(KEY_RACE_NAME, race.getName());	
   			values.put(KEY_RACE_LOCALITY, race.getLocality());	
   			values.put(KEY_RACE_DISTANCE, race.getDistance());	
   		
       	
   		
   		// update the database object.
   		int i = db.update(TABLE_RACE, values, KEY_ID + " = ?", new String[] { String.valueOf(race.getId()) });
           
           db.close();
   
           return i;
      }
     
      /*
       * Deletes the races in the database whose 'id' is the one specified in the parameter.
       * @param race including the 'id' of the rows to be deleted in the database.
       */
      public void deleteRace(Race race) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (race.getId()==-1) return;
      		
     		 // get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	     
   	     // delete the object from the database
   	     db.delete(TABLE_RACE, KEY_ID + " = ?", new String[] { String.valueOf(race.getId()) });
            db.close();
      }
    
    	    



    

 


   
  


 


   
  


 


    




     /*
       * Inserts a survey into the database.
       * @param survey Object with all the values of the object to be inserted in the database.
       * @returns The rowid of the row created, or -1 if there was an error.
       */
      public long createSurvey(Survey survey) {
   	  
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   	    if (survey.getId()!=-1) values.put(KEY_ID, survey.getId());
   			values.put(KEY_SURVEY_RATING, survey.getRating());	
   			values.put(KEY_SURVEY_ORGANISATION_RATING, survey.getOrganisationRating());
   			values.put(KEY_SURVEY_ROUTE_RATING, survey.getRouteRating());
   			values.put(KEY_SURVEY_GENERAL_RATING, survey.getGeneraralRating());
   		
       	// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   		
   		// insert row
   		long result = db.insert(TABLE_SURVEY, null, values);
   		if (result==-1) {
   			if (updateSurvey(survey)>0) result = survey.getId(); // Update the row if it already exists.
   		} else survey.setId(result); // Assign the id.
   		
   		
   		
   		
              	
   		// close the database
   		db.close();
   		
   		return result;
      }
      /*
       * Returns the survey whose id is '_id' or null if it doesn't exist in the database.
       * @return id of the survey in the database to be returned.
       */
      public Survey readSurvey(long _id) {
      		// get reference of the database
   	    SQLiteDatabase db = this.getReadableDatabase();
   	    
   	    // get the result of the query in a cursor
   	    Cursor cursor = db.rawQuery("SELECT * from "+TABLE_SURVEY+" WHERE _id="+_id, null);
   	    
   	    if (cursor != null) cursor.moveToFirst();
   	    else return null; 
   	    
   	    // If the cursor returned no rows then return null. 
   	    if (cursor.getCount()==0) return null;
   	    
   	    Survey survey = new Survey();
   	    
   	    survey.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
      		
   			 survey.setRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_RATING)));	
   			 survey.setOrganisationRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_ORGANISATION_RATING)));
   			 survey.setRouteRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_ROUTE_RATING)));
   			 survey.setGeneralRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_GENERAL_RATING)));
   		
   		
   		 
   		 
   		 
   		
   	    return survey;
      } 
     /*
       * Returns the list of surveys in the database.
       * @return ArrayList with all the surveys in the database.
       */
      public ArrayList<Survey> getAllSurveys() {
      		ArrayList<Survey> surveys = new ArrayList<Survey>();
      		
      		// The SQL query
      		String query = "SELECT * FROM " + TABLE_SURVEY;
      		
      		// get reference of the database
      		SQLiteDatabase db = this.getWritableDatabase();
   	    Cursor cursor = db.rawQuery(query, null);
   	 
   	 	// Build the array with the results in the cursor
   	 	Survey survey = null;
   	 	if (cursor.moveToFirst()) {
   	 		do {
   	 			survey = new Survey();
   	 			survey.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
   			 		survey.setRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_RATING)));	
   			 		survey.setOrganisationRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_ORGANISATION_RATING)));
   			 		survey.setRouteRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_ROUTE_RATING)));
   			 		survey.setGeneralRating(cursor.getInt(cursor.getColumnIndex(KEY_SURVEY_GENERAL_RATING)));
   				
   				 
   				 
   				 
   	 			surveys.add(survey);
   	 		} while (cursor.moveToNext());
   	 	}
   	 	
   	 	return surveys;
      } 
     /*
       * Updates the values of a survey in the database according to its 'id'.
       * @param The updated information of the survey.
       * @return The number of surveys updated in the database (-1 if update failed).
       */
      public int updateSurvey(Survey survey) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (survey.getId()==-1) return -1;
      		
      		// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	        
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   			values.put(KEY_SURVEY_RATING, survey.getRating());	
   			values.put(KEY_SURVEY_ORGANISATION_RATING, survey.getOrganisationRating());
   			values.put(KEY_SURVEY_ROUTE_RATING, survey.getRouteRating());
   			values.put(KEY_SURVEY_GENERAL_RATING, survey.getGeneraralRating());
   		
       	
   		
   		// update the database object.
   		int i = db.update(TABLE_SURVEY, values, KEY_ID + " = ?", new String[] { String.valueOf(survey.getId()) });
           
           db.close();
   
           return i;
      }
     
      /*
       * Deletes the surveys in the database whose 'id' is the one specified in the parameter.
       * @param survey including the 'id' of the rows to be deleted in the database.
       */
      public void deleteSurvey(Survey survey) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (survey.getId()==-1) return;
      		
     		 // get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	     
   	     // delete the object from the database
   	     db.delete(TABLE_SURVEY, KEY_ID + " = ?", new String[] { String.valueOf(survey.getId()) });
            db.close();
      }
    
    	    



    

 


   
  


 


   
  


 


    




     /*
       * Inserts a club into the database.
       * @param club Object with all the values of the object to be inserted in the database.
       * @returns The rowid of the row created, or -1 if there was an error.
       */
      public long createClub(Club club) {
   	  
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   	    if (club.getId()!=-1) values.put(KEY_ID, club.getId());
   			values.put(KEY_CLUB_NAME, club.getName());	
   			values.put(KEY_CLUB_LOCALITY, club.getLocality());	
   		
       	// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   		
   		// insert row
   		long result = db.insert(TABLE_CLUB, null, values);
   		if (result==-1) {
   			if (updateClub(club)>0) result = club.getId(); // Update the row if it already exists.
   		} else club.setId(result); // Assign the id.
   		
   		
   		
   		
              	
   		// close the database
   		db.close();
   		
   		return result;
      }
      /*
       * Returns the club whose id is '_id' or null if it doesn't exist in the database.
       * @return id of the club in the database to be returned.
       */
      public Club readClub(long _id) {
      		// get reference of the database
   	    SQLiteDatabase db = this.getReadableDatabase();
   	    
   	    // get the result of the query in a cursor
   	    Cursor cursor = db.rawQuery("SELECT * from "+TABLE_CLUB+" WHERE _id="+_id, null);
   	    
   	    if (cursor != null) cursor.moveToFirst();
   	    else return null; 
   	    
   	    // If the cursor returned no rows then return null. 
   	    if (cursor.getCount()==0) return null;
   	    
   	    Club club = new Club();
   	    
   	    club.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
      		
   			 club.setName(cursor.getString(cursor.getColumnIndex(KEY_CLUB_NAME)));	
   			 club.setLocality(cursor.getString(cursor.getColumnIndex(KEY_CLUB_LOCALITY)));	
   		
   		
   		 
   		 
   		 
   		
   	    return club;
      } 
     /*
       * Returns the list of clubs in the database.
       * @return ArrayList with all the clubs in the database.
       */
      public ArrayList<Club> getAllClubs() {
      		ArrayList<Club> clubs = new ArrayList<Club>();
      		
      		// The SQL query
      		String query = "SELECT * FROM " + TABLE_CLUB;
      		
      		// get reference of the database
      		SQLiteDatabase db = this.getWritableDatabase();
   	    Cursor cursor = db.rawQuery(query, null);
   	 
   	 	// Build the array with the results in the cursor
   	 	Club club = null;
   	 	if (cursor.moveToFirst()) {
   	 		do {
   	 			club = new Club();
   	 			club.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
   			 		club.setName(cursor.getString(cursor.getColumnIndex(KEY_CLUB_NAME)));	
   			 		club.setLocality(cursor.getString(cursor.getColumnIndex(KEY_CLUB_LOCALITY)));	
   				
   				 
   				 
   				 
   	 			clubs.add(club);
   	 		} while (cursor.moveToNext());
   	 	}
   	 	
   	 	return clubs;
      } 
     /*
       * Updates the values of a club in the database according to its 'id'.
       * @param The updated information of the club.
       * @return The number of clubs updated in the database (-1 if update failed).
       */
      public int updateClub(Club club) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (club.getId()==-1) return -1;
      		
      		// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	        
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   			values.put(KEY_CLUB_NAME, club.getName());	
   			values.put(KEY_CLUB_LOCALITY, club.getLocality());	
   		
       	
   		
   		// update the database object.
   		int i = db.update(TABLE_CLUB, values, KEY_ID + " = ?", new String[] { String.valueOf(club.getId()) });
           
           db.close();
   
           return i;
      }
     
      /*
       * Deletes the clubs in the database whose 'id' is the one specified in the parameter.
       * @param club including the 'id' of the rows to be deleted in the database.
       */
      public void deleteClub(Club club) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (club.getId()==-1) return;
      		
     		 // get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	     
   	     // delete the object from the database
   	     db.delete(TABLE_CLUB, KEY_ID + " = ?", new String[] { String.valueOf(club.getId()) });
            db.close();
      }
    
    	    



    

 


   
  


 


   
  


 


    




     /*
       * Inserts a category into the database.
       * @param category Object with all the values of the object to be inserted in the database.
       * @returns The rowid of the row created, or -1 if there was an error.
       */
      public long createCategory(Category category) {
   	  
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   	    if (category.getId()!=-1) values.put(KEY_ID, category.getId());
   			values.put(KEY_CATEGORY_NAME, category.getName());	
   		
       	// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   		
   		// insert row
   		long result = db.insert(TABLE_CATEGORY, null, values);
   		if (result==-1) {
   			if (updateCategory(category)>0) result = category.getId(); // Update the row if it already exists.
   		} else category.setId(result); // Assign the id.
   		
   		
   		
   		
              	
   		// close the database
   		db.close();
   		
   		return result;
      }
      /*
       * Returns the category whose id is '_id' or null if it doesn't exist in the database.
       * @return id of the category in the database to be returned.
       */
      public Category readCategory(long _id) {
      		// get reference of the database
   	    SQLiteDatabase db = this.getReadableDatabase();
   	    
   	    // get the result of the query in a cursor
   	    Cursor cursor = db.rawQuery("SELECT * from "+TABLE_CATEGORY+" WHERE _id="+_id, null);
   	    
   	    if (cursor != null) cursor.moveToFirst();
   	    else return null; 
   	    
   	    // If the cursor returned no rows then return null. 
   	    if (cursor.getCount()==0) return null;
   	    
   	    Category category = new Category();
   	    
   	    category.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
      		
   			 category.setName(cursor.getString(cursor.getColumnIndex(KEY_CATEGORY_NAME)));	
   		
   		
   		 
   		 
   		 
   		
   	    return category;
      } 
     /*
       * Returns the list of categorys in the database.
       * @return ArrayList with all the categorys in the database.
       */
      public ArrayList<Category> getAllCategorys() {
      		ArrayList<Category> categorys = new ArrayList<Category>();
      		
      		// The SQL query
      		String query = "SELECT * FROM " + TABLE_CATEGORY;
      		
      		// get reference of the database
      		SQLiteDatabase db = this.getWritableDatabase();
   	    Cursor cursor = db.rawQuery(query, null);
   	 
   	 	// Build the array with the results in the cursor
   	 	Category category = null;
   	 	if (cursor.moveToFirst()) {
   	 		do {
   	 			category = new Category();
   	 			category.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
   			 		category.setName(cursor.getString(cursor.getColumnIndex(KEY_CATEGORY_NAME)));	
   				
   				 
   				 
   				 
   	 			categorys.add(category);
   	 		} while (cursor.moveToNext());
   	 	}
   	 	
   	 	return categorys;
      } 
     /*
       * Updates the values of a category in the database according to its 'id'.
       * @param The updated information of the category.
       * @return The number of categorys updated in the database (-1 if update failed).
       */
      public int updateCategory(Category category) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (category.getId()==-1) return -1;
      		
      		// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	        
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   			values.put(KEY_CATEGORY_NAME, category.getName());	
   		
       	
   		
   		// update the database object.
   		int i = db.update(TABLE_CATEGORY, values, KEY_ID + " = ?", new String[] { String.valueOf(category.getId()) });
           
           db.close();
   
           return i;
      }
     
      /*
       * Deletes the categorys in the database whose 'id' is the one specified in the parameter.
       * @param category including the 'id' of the rows to be deleted in the database.
       */
      public void deleteCategory(Category category) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (category.getId()==-1) return;
      		
     		 // get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	     
   	     // delete the object from the database
   	     db.delete(TABLE_CATEGORY, KEY_ID + " = ?", new String[] { String.valueOf(category.getId()) });
            db.close();
      }
    
    	    



    

 


   
  


 


   
  


 


    




     /*
       * Inserts a position into the database.
       * @param position Object with all the values of the object to be inserted in the database.
       * @returns The rowid of the row created, or -1 if there was an error.
       */
      public long createPosition(Position position) {
   	  
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   	    if (position.getId()!=-1) values.put(KEY_ID, position.getId());
   			values.put(KEY_POSITION_CATEGORY_POSITION, position.getCategoryPosition());
   			values.put(KEY_POSITION_GENERAL_POSITION, position.getGeneralPosition());
   		
       	// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   		
   		// insert row
   		long result = db.insert(TABLE_POSITION, null, values);
   		if (result==-1) {
   			if (updatePosition(position)>0) result = position.getId(); // Update the row if it already exists.
   		} else position.setId(result); // Assign the id.
   		
   		
   		
   		
              	
   		// close the database
   		db.close();
   		
   		return result;
      }
      /*
       * Returns the position whose id is '_id' or null if it doesn't exist in the database.
       * @return id of the position in the database to be returned.
       */
      public Position readPosition(long _id) {
      		// get reference of the database
   	    SQLiteDatabase db = this.getReadableDatabase();
   	    
   	    // get the result of the query in a cursor
   	    Cursor cursor = db.rawQuery("SELECT * from "+TABLE_POSITION+" WHERE _id="+_id, null);
   	    
   	    if (cursor != null) cursor.moveToFirst();
   	    else return null; 
   	    
   	    // If the cursor returned no rows then return null. 
   	    if (cursor.getCount()==0) return null;
   	    
   	    Position position = new Position();
   	    
   	    position.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
      		
   			 position.setCategoryPosition(cursor.getInt(cursor.getColumnIndex(KEY_POSITION_CATEGORY_POSITION)));
   			 position.setGeneralPosition(cursor.getInt(cursor.getColumnIndex(KEY_POSITION_GENERAL_POSITION)));
   		
   		
   		 
   		 
   		 
   		
   	    return position;
      } 
     /*
       * Returns the list of positions in the database.
       * @return ArrayList with all the positions in the database.
       */
      public ArrayList<Position> getAllPositions() {
      		ArrayList<Position> positions = new ArrayList<Position>();
      		
      		// The SQL query
      		String query = "SELECT * FROM " + TABLE_POSITION;
      		
      		// get reference of the database
      		SQLiteDatabase db = this.getWritableDatabase();
   	    Cursor cursor = db.rawQuery(query, null);
   	 
   	 	// Build the array with the results in the cursor
   	 	Position position = null;
   	 	if (cursor.moveToFirst()) {
   	 		do {
   	 			position = new Position();
   	 			position.setId(cursor.getInt(cursor.getColumnIndex(KEY_ID)));
   			 		position.setCategoryPosition(cursor.getInt(cursor.getColumnIndex(KEY_POSITION_CATEGORY_POSITION)));
   			 		position.setGeneralPosition(cursor.getInt(cursor.getColumnIndex(KEY_POSITION_GENERAL_POSITION)));
   				
   				 
   				 
   				 
   	 			positions.add(position);
   	 		} while (cursor.moveToNext());
   	 	}
   	 	
   	 	return positions;
      } 
     /*
       * Updates the values of a position in the database according to its 'id'.
       * @param The updated information of the position.
       * @return The number of positions updated in the database (-1 if update failed).
       */
      public int updatePosition(Position position) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (position.getId()==-1) return -1;
      		
      		// get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	        
   	    // Get the values to be inserted
   	    ContentValues values = new ContentValues();
   			values.put(KEY_POSITION_CATEGORY_POSITION, position.getCategoryPosition());
   			values.put(KEY_POSITION_GENERAL_POSITION, position.getGeneralPosition());
   		
       	
   		
   		// update the database object.
   		int i = db.update(TABLE_POSITION, values, KEY_ID + " = ?", new String[] { String.valueOf(position.getId()) });
           
           db.close();
   
           return i;
      }
     
      /*
       * Deletes the positions in the database whose 'id' is the one specified in the parameter.
       * @param position including the 'id' of the rows to be deleted in the database.
       */
      public void deletePosition(Position position) {
      		// Id must be set. Otherwise return -1 to report the error.
      		if (position.getId()==-1) return;
      		
     		 // get reference of the database
   	     SQLiteDatabase db = this.getWritableDatabase();
   	     
   	     // delete the object from the database
   	     db.delete(TABLE_POSITION, KEY_ID + " = ?", new String[] { String.valueOf(position.getId()) });
            db.close();
      }
    
}




